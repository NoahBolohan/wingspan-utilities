[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\nlibrary(DT)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\nlibrary(tidyr)\r\nlibrary(stringr)\r\nlibrary(plotly)\r\nlibrary(readr)\r\nlibrary(gt)\r\n\r\ndf <- get_score_sheet(\r\n  sheetId = 2096833443\r\n)\r\n\r\nui <- page_sidebar(\r\n  \r\n  title = \"Wingspan Analytics\",\r\n  sidebar = sidebar(\r\n    selectInput(\r\n      inputId = \"playerName\",\r\n      label = \"Select player name:\",\r\n      choices =\r\n        c(\r\n          \"Alex\",\r\n          \"Mila\",\r\n          \"Noah\"\r\n        )\r\n    ),\r\n    uiOutput(\"slider\")\r\n    # sliderInput( \r\n    #   inputId = \"nGamesToDisplay\",\r\n    #   label = \"Last N games:\",\r\n    #   min = 10,\r\n    #   max = nrow(df), \r\n    #   value = 50 \r\n    # )\r\n  ),\r\n  \r\n  layout_column_wrap(\r\n    width = 1/2,\r\n    height = 300,\r\n    card(\r\n      card_header(\r\n        \"General stats\"\r\n      ),\r\n      card_body(\r\n        gt_output(outputId = \"tablePlayerStats\")\r\n      )\r\n    ),\r\n    navset_card_tab(\r\n      height = 450,\r\n      full_screen = TRUE,\r\n      title = \"Player stats\",\r\n      nav_panel(\r\n        \"Total score\",\r\n        card_title(\"Total score over time\"),\r\n        plotOutput(outputId = \"totalScorePlot\")\r\n      ),\r\n      nav_panel(\r\n        \"Score breakdown\",\r\n        card_title(\"Score breakdown over time\"),\r\n        plotOutput(outputId = \"scoreBreakdownPlot\")\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output) {\r\n  \r\n  lapply(\r\n    list.files(\"./R\", full.names = TRUE),\r\n    source\r\n  )\r\n  \r\n  df <- get_score_sheet(\r\n    sheetId = 2096833443\r\n  )\r\n  \r\n  stacked_player_scores <- lapply(1:7, iterative_pivot, df = df) |> bind_rows() |>\r\n    drop_na() |>\r\n    group_by(game) |>\r\n    mutate(\r\n      winner = case_when(\r\n        score >= max(score, na.rm = TRUE) ~ TRUE,\r\n        .default = FALSE\r\n      )\r\n    ) |>\r\n    ungroup()\r\n  \r\n  #N-games slider\r\n  output$slider <- renderUI({\r\n    \r\n    player_scores_total <- stacked_player_scores %>% filter(\r\n      Name == input$playerName,\r\n      score_type == \"total_score\"\r\n    )\r\n    \r\n    sliderInput(\r\n      inputId = \"nGamesToDisplay\",\r\n      label = \"Last N games:\",\r\n      min = 10,\r\n      max = nrow(\r\n        player_scores_total\r\n      ),\r\n      value = min(\r\n        30,\r\n        nrow(\r\n          player_scores_total\r\n        )\r\n      )\r\n    )\r\n  })\r\n\r\n  # Player stats table\r\n  output$tablePlayerStats <- render_gt({\r\n    \r\n    shiny::req(input$nGamesToDisplay)\r\n    \r\n    player_scores_total <- stacked_player_scores %>% filter(\r\n      Name == input$playerName,\r\n      score_type == \"total_score\"\r\n    ) %>% arrange(game)\r\n    \r\n    if (input$nGamesToDisplay != \"All\") {\r\n      player_scores_total <- tail(\r\n        player_scores_total,\r\n        min(\r\n          input$nGamesToDisplay,\r\n          nrow(\r\n            player_scores_total\r\n          )\r\n        )\r\n      )\r\n    }\r\n    \r\n    summary_frame = data.frame(\r\n      Measure = c(\r\n        \"Games played\",\r\n        \"Games won\",\r\n        \"Win rate\",\r\n        \"Max score\",\r\n        \"Min score\",\r\n        \"Mean score\"\r\n      ),\r\n      Value = c(\r\n        nrow(player_scores_total),\r\n        sum(player_scores_total[\"winner\"]),\r\n        paste0(\r\n          round(\r\n            100 *\r\n            sum(player_scores_total[\"winner\"]) /\r\n            nrow(player_scores_total),\r\n            2\r\n          ), \" %\"\r\n        ),\r\n        max(player_scores_total[\"score\"]),\r\n        min(player_scores_total[\"score\"]),\r\n        paste(\r\n          round(\r\n            colMeans(player_scores_total[\"score\"]),\r\n            2\r\n          ),\r\n          \" (+/-\",\r\n          round(\r\n            colSdColMeans(player_scores_total[\"score\"]),\r\n            2\r\n          ),\r\n          \")\",\r\n          sep=\"\"\r\n        )\r\n      )\r\n    )\r\n    \r\n    summary_frame %>%\r\n      gt() %>%\r\n      tab_header(\r\n        title = paste(\r\n          input$playerName\r\n        )\r\n      )\r\n  })\r\n  \r\n  # Player total score plot\r\n  output$totalScorePlot <- renderPlot({\r\n    \r\n    shiny::req(input$nGamesToDisplay)\r\n    \r\n    player_scores_total <- stacked_player_scores %>% filter(\r\n      Name == input$playerName,\r\n      score_type == \"total_score\"\r\n    ) %>% arrange(\r\n      game\r\n    ) %>% tail(\r\n      input$nGamesToDisplay\r\n    )\r\n    \r\n    ggplot(\r\n      player_scores_total,\r\n      aes(\r\n        # x = pull(player_scores_total[\"game\"]),\r\n        x = as.integer(rownames(player_scores_total)),\r\n        y = pull(player_scores_total[\"score\"])\r\n      )\r\n    ) +\r\n      geom_line() +\r\n      xlab(\"Game number\") +\r\n      ylab(\"Score\")\r\n  })\r\n  \r\n  # Player score breakdown plot\r\n  output$scoreBreakdownPlot <- renderPlot({\r\n    \r\n    shiny::req(input$nGamesToDisplay)\r\n    \r\n    player_scores <- filter(\r\n      stacked_player_scores,\r\n      Name == input$playerName,\r\n      score_type != \"total_score\"\r\n    ) %>% filter(\r\n      game >= min(\r\n        tail(\r\n          sort(\r\n            unique(\r\n              game\r\n            )\r\n          ),\r\n          input$nGamesToDisplay\r\n        )\r\n      )\r\n    ) %>% mutate(\r\n      inc_game = as.numeric(\r\n        factor(\r\n          game,\r\n          levels = unique(game)\r\n        )\r\n      )\r\n    )\r\n    \r\n    ggplot(\r\n      player_scores,\r\n      aes(\r\n        # x = pull(player_scores[\"game\"]),\r\n        x = as.numeric(factor(game, levels = unique(game))),\r\n        y = pull(player_scores[\"score\"]),\r\n        fill = pull(player_scores[\"score_type\"])\r\n      )\r\n    ) + \r\n      geom_area() +\r\n      xlab(\"Game number\") +\r\n      ylab(\"Score\") +\r\n      labs(fill=\"Score types\")\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n# shinylive::export(\r\n#   appdir = \"C:/Git/wingspan-utilities/myapp\",\r\n#   destdir = \"C:/Git/wingspan-utilities/docs\"\r\n# )\r\n\r\n# httpuv::runStaticServer(\"C:/Git/wingspan-utilities/docs\")","type":"text"},{"name":"R/colSdColMeans.R","content":"colSdColMeans <- function(x, na.rm=TRUE) {\r\n  # https://stackoverflow.com/a/17551600\r\n  if (na.rm) {\r\n    n <- colSums(!is.na(x)) # thanks @flodel\r\n  } else {\r\n    n <- nrow(x)\r\n  }\r\n  colVar <- colMeans(x*x, na.rm=na.rm) - (colMeans(x, na.rm=na.rm))^2\r\n  return(sqrt(colVar * n/(n-1)))\r\n}","type":"text"},{"name":"R/construct_download_url.R","content":"construct_download_url <- function(url, format='csv', sheetid = NULL){\r\n  # Taken from Max Conway: https://github.com/maxconway/gsheet/tree/master\r\n  key <- stringr::str_extract(url, '[[:alnum:]_-]{30,}')\r\n  if(is.null(sheetid) & stringr::str_detect(url, 'gid=[[:digit:]]+')){\r\n    sheetid <- as.numeric(stringr::str_extract(stringr::str_extract(url,'gid=[[:digit:]]+'),'[[:digit:]]+'))\r\n  }\r\n  address <- paste0('https://docs.google.com/spreadsheets/export?id=',key,'&format=',format)\r\n  if(!is.null(sheetid)){\r\n    address <- paste0(address, '&gid=', sheetid)\r\n  }\r\n  return(address)\r\n}","type":"text"},{"name":"R/get_score_sheet.R","content":"get_score_sheet <- function(\r\n    url = 'https://docs.google.com/spreadsheets/d/1K600qeRyYevSrMBUyevP4sZ4vRIBzq4ggCl3cLjHAvc',\r\n    format = 'csv',\r\n    sheetId = NULL\r\n) {\r\n  \r\n  # Taken from Max Conway: https://github.com/maxconway/gsheet/tree/master\r\n  key <- stringr::str_extract(url, '[[:alnum:]_-]{30,}')\r\n  if(is.null(sheetId) & stringr::str_detect(url, 'gid=[[:digit:]]+')){\r\n    sheetId <- as.numeric(stringr::str_extract(stringr::str_extract(url,'gid=[[:digit:]]+'),'[[:digit:]]+'))\r\n  }\r\n  address <- paste0('https://docs.google.com/spreadsheets/export?id=',key,'&format=',format)\r\n  if(!is.null(sheetId)){\r\n    address <- paste0(address, '&gid=', sheetId)\r\n  }\r\n  \r\n  df <- read_csv(\r\n    address,\r\n    col_types = cols(\r\n      timestamp = col_character(),\r\n      n_players = col_integer(),\r\n      base = col_character(),\r\n      european_expansion = col_character(),\r\n      oceania_expansion = col_character(),\r\n      asia = col_character(),\r\n      duet_mode = col_character(),\r\n      player_1_name = col_character(),\r\n      player_1_birds = col_integer(),\r\n      player_1_bonus_cards = col_integer(),\r\n      \"player_1_end-of-round_goals\" = col_integer(),\r\n      player_1_eggs = col_integer(),\r\n      player_1_food_on_cards = col_integer(),\r\n      player_1_tucked_cards = col_integer(),\r\n      player_1_nectar = col_integer(),\r\n      player_1_duet_tokens = col_integer(),\r\n      player_1_total_score = col_integer(),\r\n      player_2_name = col_character(),\r\n      player_2_birds = col_integer(),\r\n      player_2_bonus_cards = col_integer(),\r\n      \"player_2_end-of-round_goals\" = col_integer(),\r\n      player_2_eggs = col_integer(),\r\n      player_2_food_on_cards = col_integer(),\r\n      player_2_tucked_cards = col_integer(),\r\n      player_2_nectar = col_integer(),\r\n      player_2_duet_tokens = col_integer(),\r\n      player_2_total_score = col_integer(),\r\n      player_3_name = col_character(),\r\n      player_3_birds = col_integer(),\r\n      player_3_bonus_cards = col_integer(),\r\n      \"player_3_end-of-round_goals\" = col_integer(),\r\n      player_3_eggs = col_integer(),\r\n      player_3_food_on_cards = col_integer(),\r\n      player_3_tucked_cards = col_integer(),\r\n      player_3_nectar = col_integer(),\r\n      player_3_total_score = col_integer(),\r\n      player_4_name = col_character(),\r\n      player_4_birds = col_integer(),\r\n      player_4_bonus_cards = col_integer(),\r\n      \"player_4_end-of-round_goals\" = col_integer(),\r\n      player_4_eggs = col_integer(),\r\n      player_4_food_on_cards = col_integer(),\r\n      player_4_tucked_cards = col_integer(),\r\n      player_4_nectar = col_integer(),\r\n      player_4_total_score = col_integer(),\r\n      player_5_name = col_character(),\r\n      player_5_birds = col_integer(),\r\n      player_5_bonus_cards = col_integer(),\r\n      \"player_5_end-of-round_goals\" = col_integer(),\r\n      player_5_eggs = col_integer(),\r\n      player_5_food_on_cards = col_integer(),\r\n      player_5_tucked_cards = col_integer(),\r\n      player_5_nectar = col_integer(),\r\n      player_5_total_score = col_integer(),\r\n      player_6_name = col_character(),\r\n      player_6_birds = col_integer(),\r\n      player_6_bonus_cards = col_integer(),\r\n      \"player_6_end-of-round_goals\" = col_integer(),\r\n      player_6_eggs = col_integer(),\r\n      player_6_food_on_cards = col_integer(),\r\n      player_6_tucked_cards = col_integer(),\r\n      player_6_nectar = col_integer(),\r\n      player_6_total_score = col_integer(),\r\n      player_7_name = col_character(),\r\n      player_7_birds = col_integer(),\r\n      player_7_bonus_cards = col_integer(),\r\n      \"player_7_end-of-round_goals\" = col_integer(),\r\n      player_7_eggs = col_integer(),\r\n      player_7_food_on_cards = col_integer(),\r\n      player_7_tucked_cards = col_integer(),\r\n      player_7_nectar = col_integer(),\r\n      player_7_total_score = col_integer(),\r\n    )\r\n  )\r\n  \r\n  df <- df |> mutate(game = 1:nrow(df), .before = 1)\r\n  \r\n  return(df)\r\n}","type":"text"},{"name":"R/iterative_pivot.R","content":"\r\n#' iteratively pivot to grab each player from each game\r\n#'\r\n#' @param df dataframe of score data\r\n#' @param player int 1 to 7\r\n#'\r\n#' @return pivoted df\r\n#' @export\r\n#'\r\n#' @examples\r\n#' \r\niterative_pivot <- function(df, player) {\r\n\r\n    tryCatch(\r\n      expr = {\r\n        id_col_name <- paste0(\"player_\",player)\r\n\r\n        df |> select(\r\n          !contains(\"player\"),\r\n          contains(as.character(player))\r\n        ) |>\r\n          pivot_longer(\r\n          cols = paste0(id_col_name,\"_birds\"):paste0(id_col_name,\"_total_score\"),\r\n          names_to = \"score_type\",\r\n          values_to = \"score\"\r\n        ) |>\r\n        rename(Name =paste0(\"player_\",player,\"_name\")) |>\r\n        mutate(\r\n          score_type = str_remove(\r\n            score_type,\r\n            paste0(id_col_name, \"_\")\r\n          )\r\n        )\r\n      },\r\n      error = function(e) {\r\n        message(\"Player: \", player, \" not found.\")\r\n      }\r\n    )\r\n}","type":"text"}]
